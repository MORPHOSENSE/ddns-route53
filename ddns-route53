#!/bin/bash

declare -r DATE_FORMAT="%Y-%m-%d %H:%M:%S"
declare -r VERSION="1.0.1"
declare ttl=${DDNS_ROUTE53_TTL:-300}
declare type="${DDNS_ROUTE53_TYPE:-A}"
declare comment="${DDNS_ROUTE53_COMMENT:-Updated at $(date +"$DATE_FORMAT")}"
declare log_dir="${DDNS_ROUTE53_LOG_DIR:-/var/log/ddns-route53}"
declare zone_id="$DDNS_ROUTE53_ZONE_ID"
declare record_set="$DDNS_ROUTE53_RECORD_SET"
declare handler_script="$DDNS_ROUTE53_SCRIPT"
declare log_file
declare ip_file

function errcho() {
  >&2 echo "$@"
}

function wlog() {
  echo "[$(date +"$DATE_FORMAT")]: $*" >> "$log_file"
}

function usage() {
  cat <<HELP
Usage: $(basename "$0") [OPTIONS]

Dynamic DNS updater using Amazon Route53.

Options:
  -z, --zone-id=ZONE_ID         Amazon Route53 hosted zone ID (required)
  -r, --record-set=RECORD_SET   Amazon Route53 record set name (required)
  -t, --ttl=SECONDS             TTL for DNS record
  -y, --type=A_AAAA             DNS record type (A or AAAA)
  -l, --log-dir=PATH            Directory to store logs and state
  -i, --ip=IP_ADDRESS           Force usage of IP address
  -s, --script=PATH             Path to script to execute on change
  -h, --help                    You're looking at it
  -v, --version                 Print version and exit
HELP
}

function valid_ip() {
  local ip=$1
  local stat=1 octets
  if [[ $ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
      OIFS=$IFS
      IFS='.'
      octets=($ip)
      IFS=$OIFS
      [[ ${octets[0]} -le 255 && ${octets[1]} -le 255 \
          && ${octets[2]} -le 255 && ${octets[3]} -le 255 ]]
      stat=$?
  fi
  return $stat
}

function validate-arguments() {
  if [[ -z $zone_id ]]; then
    errcho "Missing -z | --zone-id | \$DDNS_ROUTE53_ZONE_ID"
    exit 1
  elif [[ -z $record_set ]]; then
    errcho "Missing -r | --record-set | \$DDNS_ROUTE53_RECORD_SET"
    exit 1
  fi
  if [[ -n "$handler_script" && ! -x "$handler_script" ]]; then
    errcho "Script at '$handler_script' is not executable"
    exit 1
  fi
}

function setup-logging() {
  log_file="$log_dir/ddns-route53.log"
  ip_file="$log_dir/ip"
  if [ ! -d "$log_dir" ]; then
    if ! mkdir -p "$log_dir" 2> /dev/null; then
      errcho "Failed to create log directory $log_dir"
      exit 1
    fi
  fi
}

function validate-ip() {
  if [[ -z $ip ]]; then
    ip=$(dig +short myip.opendns.com @resolver1.opendns.com)
  fi
  if ! valid_ip "$ip"; then
    wlog "Invalid IP address: $ip"
    exit 1
  fi
}

function maybe-update() {
  if grep -Fxq "$ip" "$ip_file" 2> /dev/null; then
    wlog "Current IP == $ip, exiting"
    exit 0
  else
    local tmp_file old_ip output success
    old_ip="$(cat "$ip_file" 2> /dev/null)"
    tmp_file=$(mktemp -t ddns-route53.XXXXXXXX)
    wlog "IP has changed from $old_ip to $ip, updating"
    cat > "$tmp_file" << EOF
    {
      "Comment": "$comment",
      "Changes": [
        {
          "Action": "UPSERT",
          "ResourceRecordSet": {
            "ResourceRecords": [
              {"Value": "$ip"}
            ],
            "Name": "$record_set",
            "Type": "$type",
            "TTL": $ttl
          }
        }
      ]
    }
EOF

    output=$(aws route53 change-resource-record-sets --hosted-zone-id "$zone_id" --change-batch "file://$tmp_file" 2>&1)
    success=$?
    wlog "$output"
    if [ $success -eq 0 ]; then
      echo "$ip" > "$ip_file"
    fi
    rm "$tmp_file"
    maybe-run-handler "$old_ip" "$ip"
  fi
}

function maybe-run-handler() {
  if [[ -n "$handler_script" ]]; then
    local old_ip=$1
    local new_ip=$2
    "$handler_script" "$old_ip" "$new_ip"
  fi
}

while [[ $# -gt 0 ]]; do
  case "$1" in
    -z|--zone-id)
      zone_id="$2"
      shift
      ;;
    --zone-id=?*)
      zone_id="${1#*=}"
      ;;
    -r|--record-set)
      record_set="$2"
      shift
      ;;
    --record-set=?*)
      record_set="${1#*=}"
      ;;
    -l|--log-dir)
      log_dir="$2"
      shift
      ;;
    --log-dir=?*)
      log_dir="${1#*=}"
      ;;
    -i|--ip)
      ip="$2"
      shift
      ;;
    --ip=?*)
      ip="${1#*=}"
      ;;
    -t|--ttl)
      ttl="$2"
      shift
      ;;
    --ttl=?*)
      ttl="${1#*=}"
      ;;
    -y|--type)
      type="$2"
      shift
      ;;
    --type=?*)
      type="${1#*=}"
      ;;
    -s|--script)
      handler_script="$2"
      shift
      ;;
    --script=?*)
      handler_script="${1#*=}"
      ;;
    -h|--help)
      usage
      exit 0
      ;;
    -v|--version)
      echo "$VERSION"
      exit 0
      ;;
    *)
      echo -e "Unkown option: $1\n"
      usage
      exit 1
      ;;
  esac
  shift
done

validate-arguments
setup-logging
validate-ip
maybe-update

exit 0
