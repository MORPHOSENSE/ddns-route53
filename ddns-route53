#!/bin/bash

declare -r DATE_FORMAT="%Y-%m-%d %H:%M:%S"
declare -r VERSION="1.1.0"
declare ttl=${DDNS_ROUTE53_TTL:-300}
declare record_type="${DDNS_ROUTE53_TYPE:-A}"
declare comment="${DDNS_ROUTE53_COMMENT:-Updated at $(date +"$DATE_FORMAT")}"
declare log_dir="${DDNS_ROUTE53_LOG_DIR:-/var/log/ddns-route53}"
declare zone_id="$DDNS_ROUTE53_ZONE_ID"
declare record_set="$DDNS_ROUTE53_RECORD_SET"
declare handler_script="$DDNS_ROUTE53_SCRIPT"
declare log_file
declare state

function errcho() {
  >&2 echo "$@"
}

function wlog() {
  echo "[$(date +"$DATE_FORMAT")]: $*" >> "$log_file"
}

function usage() {
  cat <<HELP
Usage: $(basename "$0") [OPTIONS]

Dynamic DNS updater using Amazon Route53.

Options:
  -z, --zone-id=ZONE_ID         Amazon Route53 hosted zone ID (required)
  -r, --record-set=RECORD_SET   Amazon Route53 record set name (required)
  -t, --ttl=SECONDS             TTL for DNS record
  -y, --type=A_AAAA             DNS record type (A or AAAA)
  -l, --log-dir=PATH            Directory to store logs and state
  -i, --ip=IP_ADDRESS           Force usage of IP address
  -s, --script=PATH             Path to script to execute on change
  -h, --help                    You're looking at it
  -v, --version                 Print version and exit
HELP
}

function valid-ip() {
  local ip result octets
  ip=$1
  result=1
  if [[ $ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
      OIFS=$IFS
      IFS='.'
      octets=($ip)
      IFS=$OIFS
      [[ ${octets[0]} -le 255 && ${octets[1]} -le 255 \
          && ${octets[2]} -le 255 && ${octets[3]} -le 255 ]]
      result=$?
  fi
  return $result
}

function validate-arguments() {
  if [[ -z $zone_id ]]; then
    errcho "Missing -z | --zone-id | \$DDNS_ROUTE53_ZONE_ID"
    exit 1
  elif [[ -z $record_set ]]; then
    errcho "Missing -r | --record-set | \$DDNS_ROUTE53_RECORD_SET"
    exit 1
  fi
  if [[ -n "$handler_script" && ! -x "$handler_script" ]]; then
    errcho "Script at '$handler_script' is not executable"
    exit 1
  fi
}

function setup-logging() {
  log_file="$log_dir/ddns-route53.log"
  state="$log_dir/ip"
  if [ ! -d "$log_dir" ]; then
    if ! mkdir -p "$log_dir" 2> /dev/null; then
      errcho "Failed to create log directory $log_dir"
      exit 1
    fi
  fi
}

function validate-ip() {
  if [[ -z $ip ]]; then
    ip=$(dig +short myip.opendns.com @resolver1.opendns.com)
  fi
  if ! valid-ip "$ip"; then
    wlog "Invalid IP address: $ip"
    exit 1
  fi
}

function maybe-update() {
  if grep -Fxq "$ip" "$state" 2> /dev/null; then
    wlog "Current IP == $ip, exiting"
    exit 0
  else
    local tmp_file old_ip output success
    old_ip="$(cat "$state" 2> /dev/null)"
    tmp_file=$(mktemp -t ddns-route53.XXXXXXXX)
    wlog "IP has changed from $old_ip to $ip, updating"
    cat > "$tmp_file" << EOF
    {
      "Comment": "$comment",
      "Changes": [
        {
          "Action": "UPSERT",
          "ResourceRecordSet": {
            "ResourceRecords": [
              {"Value": "$ip"}
            ],
            "Name": "$record_set",
            "Type": "$record_type",
            "TTL": $ttl
          }
        }
      ]
    }
EOF

    output=$(aws route53 change-resource-record-sets --hosted-zone-id "$zone_id" --change-batch "file://$tmp_file" 2>&1)
    success=$?
    wlog "$output"
    if [ $success -eq 0 ]; then
      echo "$ip" > "$state"
    fi
    rm "$tmp_file"
    maybe-run-handler "$old_ip" "$ip"
  fi
}

function maybe-run-handler() {
  if [[ -n "$handler_script" ]]; then
    local old_ip new_ip
    old_ip=$1
    new_ip=$2
    "$handler_script" "$old_ip" "$new_ip"
  fi
}

function parse-argv() {
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -z|--zone-id) zone_id="$2"; shift ;;
      -r|--record-set) record_set="$2"; shift ;;
      -l|--log-dir) log_dir="$2"; shift ;;
      -i|--ip) ip="$2"; shift ;;
      -t|--ttl) ttl="$2"; shift ;;
      -y|--type) record_type="$2"; shift ;;
      -s|--script) handler_script="$2"; shift ;;
      -h|--help) usage; exit 0 ;;
      -v|--version) echo "$VERSION"; exit 0;;
      --zone-id=?*) zone_id="${1#*=}" ;;
      --record-set=?*) record_set="${1#*=}" ;;
      --log-dir=?*) log_dir="${1#*=}"; shift ;;
      --ip=?*) ip="${1#*=}" ;;
      --ttl=?*) ttl="${1#*=}" ;;
      --type=?*) record_type="${1#*=}" ;;
      --script=?*) handler_script="${1#*=}" ;;
      *)
        echo "Unkown option: $1"
        usage
        exit 1
        ;;
    esac
    shift
  done
}

function main() {
  parse-argv "$@"
  validate-arguments
  setup-logging
  validate-ip
  maybe-update
}

main "$@"

exit 0
